
protocol TheProtocol {
    [[rt::header_preface]]
    `
        #include "RTType_Types.h"
    `
    out e1(`MyString`);
    out e2(`MyVector`);
};

capsule Cap {
    [[rt::impl_preface]]
    `
        #include "testlib.art.h"
        #include "Types.h"
        #include "RTDynamicStringOutBuffer.h"
    `
    service behavior port pIn~ : TheProtocol;
    statemachine {
        initial -> State1;
        state State1 {
            str_received: on pIn.e1
            `
                // Encode into string representation
                const RTObject_class* mt = msg->getType();
                RTDynamicStringOutBuffer buffer;
                RTAsciiEncoding coding( &buffer );
                mt->_encode_func(mt, msg->getData(), &coding);
                std::cout << "ASCII encoding: " << buffer.getString() << std::endl << std::flush;
                ASSERT(RTMemoryUtil::strcmp("\"Hello World!\"", buffer.getString()) == 0, "Expect ASCII encoding to be \"Hello World\"");
            `;

            vec_received: on pIn.e2
            `
                // Encode into string representation
                const RTObject_class* mt = msg->getType();
                RTDynamicStringOutBuffer buffer;
                RTAsciiEncoding coding( &buffer );
                mt->_encode_func(mt, msg->getData(), &coding);
                std::cout << "ASCII encoding: " << buffer.getString() << std::endl << std::flush;
                ASSERT(RTMemoryUtil::strcmp("[1,2,3,4]", buffer.getString()) == 0, "Expect ASCII encoding to be [1,2,3,4]");

                PASS();
            `;
        };
    };
};

capsule Top {
    part cap : Cap;
    behavior port pOut : TheProtocol;
    connect pOut with cap.pIn;

    statemachine {
        state State1 {
            entry
            `
                MyString str("Hello World!");
                MyVector vec{1,2,3,4};
                pOut.e1(str).send();
                pOut.e2(vec).send();
            `;
        };
        initial -> State1;
    };
};
