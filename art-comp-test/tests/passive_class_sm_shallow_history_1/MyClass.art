
class MyClass {
    [[rt::header_preface]]
    `
        #include <iostream>
    `
    [[rt::decl]]
    `
        public:
            MyClass();
        public:
            int S2_entry_count = 0;
            int Inner_entry_count = 0;
            int State_A_entry_count = 0;
            int State_B_entry_count = 0;
    `
    [[rt::impl]]
    `
        MyClass::MyClass() {
            rtg_init1();
        }
    `
    /* Trigger Operations */
    trigger op();
    trigger opS2Entry();
    trigger opInternal(`int` val);
    /* State Machine */
    statemachine {
        state S1;
        state S2 {
            entry
            `
                S2_entry_count++;
                std::cout << "S2 entry " << S2_entry_count << std::endl;
            `;
            state TopInner {
                entrypoint enp;
                entry
                `                      
                    std::cout << "TopInner entry " << Inner_entry_count << std::endl;
                `;
                state Inner {
                    entry
                    `                      
                    Inner_entry_count++;
                    std::cout << "Inner entry " << Inner_entry_count << std::endl;
                `;
                };
                state A {
                    entry
                    `   
                    State_A_entry_count++;
                    std::cout << "A entry " << State_A_entry_count << std::endl;
                `;
                }, B {
                    entry
                    `   
                    State_B_entry_count++;
                    std::cout << "B entry " << State_B_entry_count << std::endl;
                `;
                }, C {
                    entry
                    `   
                    std::cout << "C entry"  << std::endl;
                `;
                };
                initial -> Inner;
                opInternal: Inner -> A on opInternal(`int`) [`val == 1`];
                opInternal: A -> B on opInternal(`int`) [`val == 2`];
                opInternal: Inner -> C on opInternal(`int`) [`val == 3`];
                entrypoint_history: enp -> history;
            };
            [[rt::properties(
                rule_config = "X0029"
            )]]
            initial -> TopInner;
            opS2Entry: TopInner -> TopInner.enp on opS2Entry()
            `
                std::cout << "S2 self transition" << std::endl;
            `;
        };
        initial -> S1;
        op:
        [[rt::properties(
            rule_config = "X0029"
        )]]
        S1 -> S2 on op();
    };
};