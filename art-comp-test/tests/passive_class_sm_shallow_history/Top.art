
capsule Top {
    [[rt::header_preface]]
    `
        #include "testlib.art.h"
        #include "MyClass.h"
        #include <iostream>
    `
    [[rt::decl]]
    `
        private:
            MyClass _myClass;
    `
    behavior port t : Timing;
    statemachine {
        state State1;
        initial -> State1
        `   
            ASSERT(_myClass.A_entry_count == 1, "Expected A_entry_count as 1");
            ASSERT(_myClass.B_entry_count == 0, "Expected B_entry_count as 0");

            /* On true transition will go to history*/
            _myClass.triggerHistoryOrB(true);
            ASSERT(_myClass.A_entry_count == 2, "Expected A_entry_count as 2");
            ASSERT(_myClass.B_entry_count == 0, "Expected B_entry_count as 0");

            /* On false transition will go to State B*/
            _myClass.triggerHistoryOrB(false);
            ASSERT(_myClass.A_entry_count == 2, "Expected A_entry_count as 2");
            ASSERT(_myClass.B_entry_count == 1, "Expected B_entry_count as 1");

            /* From state B to history*/
            _myClass.op();
            ASSERT(_myClass.A_entry_count == 2, "Expected A_entry_count as 2");
            ASSERT(_myClass.B_entry_count == 2, "Expected B_entry_count as 2");


            /* From state B to history*/
            _myClass.op();
            ASSERT(_myClass.A_entry_count == 2, "Expected A_entry_count as 2");
            ASSERT(_myClass.B_entry_count == 3, "Expected B_entry_count as 3");

            /* Expected */
            _myClass.op();
            ASSERT(_myClass.A_entry_count == 2, "Expected A_entry_count as 2");
            ASSERT(_myClass.B_entry_count == 3, "Transition from state B to history is guarded. It allows re-entering state B from history only if B is not entered more than 3 times");

            PASS();
        `;
    };
};
