capsule Top {  
    [[rt::decl]]
    `
        RTTimerId timerC;
    `  
    [[rt::impl_preface]]
    `
        #include "testLib.h"
        #include <string>
        #include <chrono>
        #include <iostream>
        using namespace std::chrono_literals;

        std::string result;
    `

    behavior port   timer1 : Timing, timer2 : Timing, timer3 : Timing, timer4 : Timing, 
                    timer5 : Timing, timer6 : Timing, timer7 : Timing, timer8 : Timing, done : Timing; 

    statemachine {
        state First {
            timeout1: on timer1.timeout
            `
                result += "1";

                // Cancel timerC (which by now is 0.5 s from timing out)
                timer1.cancelTimer(timerC);
                ASSERT(!timerC.isValid(), "timerC was still valid after being cancelled");                
            `;
            timeout2: on timer2.timeout
            `
                result += "2";
            `;
            timeout3: on timer3.timeout
            `
                result += "3";
            `;
            timeout4: on timer4.timeout
            `
                result += "4";
            `;
            timeout5: on timer5.timeout
            `
                result += "5";
            `;
            timeout6: on timer6.timeout
            `
                result += "6";
            `;
            timeout8: on timer8.timeout
            `
                result += "8"; 
            `;
            timeout7: on timer7.timeout
            `
                // Check that the timer timed out approximately 1 second (+- 20ms) from when it was set
                const RTTimespec then = *(static_cast<const RTTimespec*>(rtdata));
                RTTimespec now;
                RTTimespec::getclock(now);
                RTTimespec diff = now - then; // How much time passed from setting the timer until it timed out
                std::cout << diff.tv_sec << " s " << diff.tv_nsec << std::endl;
                ASSERT(diff - RTTimespec(1,0) < RTTimespec(0, 1000*1000*20 /* 20 ms */), "Timer 7 didn't timeout when expected");
            `;
        };
        initial -> First
        `            
            // Set timer with relative time using RTTimerspec API (seconds, nanoseconds)
            RTTimerId tid1 = timer1.informIn(RTTimespec(2, 0));
            ASSERT(tid1.isValid(), "timer1 could not be set");

            // Set timer with relative time using std::chrono API
            RTTimerNode* tid2 = timer2.informIn(std::chrono::milliseconds(500));
            ASSERT(tid2 != nullptr, "timer2 could not be set");

            // Set timer with relative time using std::chrono_literals API (requires C++ 14)
            RTTimerId tid3 = timer3.informIn(800ms);
            ASSERT(tid3.isValid(), "timer3 could not be set");

            // Set timer with absolute time using RTTimerspec API (seconds, nanoseconds)
            RTTimespec now;
            RTTimespec::getclock(now);
            RTTimerId tid4 = timer4.informAt(now + RTTimespec(1, 0));
            ASSERT(tid4.isValid(), "timer4 could not be set");

            // Set timer with absolute time using std::chrono API 
            std::chrono::system_clock::time_point t = std::chrono::system_clock::now() + std::chrono::microseconds(300000);
            RTTimerId tid5 = timer5.informAt(t);
            ASSERT(tid5.isValid(), "timer5 could not be set");

            // Set timer with absolute time using std::chrono_literals API (requires C++ 14)
            t += 100ms;
            RTTimerId tid6 = timer6.informAt(t);
            ASSERT(tid6.isValid(), "timer6 could not be set");

            // Pass the current time as timer data
            RTTimespec::getclock(now);
            RTTimerId tid7 = timer7.informIn(1s, &now, &RTTimespec::classData);
            ASSERT(tid7.isValid(), "timer7 could not be set");

            // A timer can be set multiple times (before it has timed out) to yield multiple timeouts
            RTTimerId tid8 = timer8.informIn(600ms);
            ASSERT(tid8.isValid(), "timer8 could not be set");
            tid8 = timer8.informIn(700ms);
            ASSERT(tid8.isValid(), "timer8 could not be set again");

            // To set a timer that may have to be cancelled from another transition, we must store
            // its timerId as a member variable
            timerC = timer1.informIn(2s + 500ms); // 2.5 s
            ASSERT(timerC.isValid(), "timerC could not be set");

            // Final timer to complete the test
            RTTimerId tid_done = done.informIn(RTTimespec(3, 0));
            ASSERT(tid_done.isValid(), "timer 'done' could not be set");            
        `;
        state Done;
        done : First -> Done on done.timeout
        `
            std::cout << "Timeout order: " << result << std::endl;
            ASSERT(result == "56288341", "Timers expired in an unexpected order");
            PASS();
        `;
    };
};
